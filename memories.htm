<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" href="./fav.svg" type="image/x-icon">
  <title>Our Beautiful Memories üì∏</title>
  <link
    href="https://fonts.googleapis.com/css2?family=Great+Vibes&family=Playfair+Display:wght@400;600;700&family=Poppins:wght@300;400;600&display=swap"
    rel="stylesheet">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      min-height: 100vh;
      overflow-x: hidden;
      background: linear-gradient(135deg, #a8edea 0%, #fed6e3 25%, #fbc2eb 50%, #f093fb 75%, #667eea 100%);
      background-size: 400% 400%;
      animation: gradientShift 20s ease infinite;
      padding: 40px 20px 100px;
      position: relative;
    }

    @keyframes gradientShift {
      0% {
        background-position: 0% 50%;
      }

      50% {
        background-position: 100% 50%;
      }

      100% {
        background-position: 0% 50%;
      }
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      position: relative;
      z-index: 2;
    }

    .header {
      text-align: center;
      margin-bottom: 60px;
      animation: fadeInDown 1s ease-out;
    }

    @keyframes fadeInDown {
      0% {
        opacity: 0;
        transform: translateY(-30px);
      }

      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    h1 {
      font-family: 'Great Vibes', cursive;
      font-size: 4.5rem;
      color: #700124;
       text-shadow: 0 2px 10px rgba(255, 100, 220, 0.2);
      margin-bottom: 15px;
    }

    .subtitle {
      font-family: 'Playfair Display', serif;
      font-size: 1.4rem;
      color: #AA0144;
      text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.3);
    }

    .timeline {
      position: relative;
      max-width: 900px;
      margin: 0 auto;
    }

    .timeline::before {
      content: '';
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      width: 4px;
      height: 100%;
      background: linear-gradient(180deg,
          rgba(255, 255, 255, 0.3),
          rgba(255, 182, 193, 0.5),
          rgba(255, 255, 255, 0.3));
      border-radius: 4px;
    }

    .memory {
      position: relative;
      margin-bottom: 60px;
      animation: fadeIn 1s ease-out backwards;
    }

    .memory:nth-child(1) {
      animation-delay: 0.1s;
    }

    .memory:nth-child(2) {
      animation-delay: 0.3s;
    }

    .memory:nth-child(3) {
      animation-delay: 0.5s;
    }

    .memory:nth-child(4) {
      animation-delay: 0.7s;
    }

    .memory:nth-child(5) {
      animation-delay: 0.9s;
    }

    .memory:nth-child(6) {
      animation-delay: 1.1s;
    }

    @keyframes fadeIn {
      0% {
        opacity: 0;
        transform: scale(0.8);
      }

      100% {
        opacity: 1;
        transform: scale(1);
      }
    }

    .memory-content {
      width: 45%;
      padding: 25px;
      background: rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(15px);
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 20px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      transition: all 0.4s ease;
      position: relative;
    }

    .memory-content:hover {
      transform: scale(1.05);
      background: rgba(255, 255, 255, 0.3);
      box-shadow: 0 12px 40px rgba(255, 105, 180, 0.3);
    }

    .memory:nth-child(odd) .memory-content {
      margin-left: auto;
    }

    .memory-icon {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #ff6b9d, #ffc3a0);
      border: 4px solid white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.8rem;
      box-shadow: 0 4px 15px rgba(255, 105, 180, 0.4);
      animation: pulse 2s ease-in-out infinite;
    }

    @keyframes pulse {

      0%,
      100% {
        transform: translateX(-50%) scale(1);
        box-shadow: 0 4px 15px rgba(255, 105, 180, 0.4);
      }

      50% {
        transform: translateX(-50%) scale(1.1);
        box-shadow: 0 6px 20px rgba(255, 105, 180, 0.6);
      }
    }

    .memory-title {
      font-family: 'Playfair Display', serif;
      font-size: 1.6rem;
      font-weight: 700;
      color: #DE0C78;
      margin-bottom: 10px;
      text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
    }

    .memory-date {
      font-size: 0.9rem;
      color: #F01C9C;
      font-weight: 600;
      margin-bottom: 10px;
      text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.2);
    }

    .memory-text {
      font-size: 1rem;
       color: #4C020F;
      line-height: 1.6;
      text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.15);
    }

    .back-button {
      position: fixed;
      top: 30px;
      left: 30px;
      background: linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02));
      backdrop-filter: blur(5px);
      border: 2px solid rgba(255, 255, 255, 0.4);
      color: rgba(0, 0, 0, 0.7);
      padding: 12px 25px;
      border-radius: 30px;
      text-decoration: none;
      font-weight: 600;
      font-size: 1rem;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgb(132, 0, 94);
      z-index: 100;
    }
    .back-button:hover {
      background: linear-gradient(90deg, var(--accent1, #ff7a7a), var(--accent2, #ff2e63));
      color: #fff;
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(255, 46, 99, 0.3);
    } 
    .back-button:hover::before {
    transform: translateX(-4px);
    color: #fff;
    }
    .sparkles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
      overflow: hidden;
    }

    .sparkle {
      position: absolute;
      width: 4px;
      height: 4px;
      background: white;
      border-radius: 50%;
      animation: sparkleAnim 3s infinite ease-in-out;
      box-shadow: 0 0 10px white;
    }

    @keyframes sparkleAnim {

      0%,
      100% {
        opacity: 0;
        transform: scale(0);
      }

      50% {
        opacity: 1;
        transform: scale(1.5);
      }
    }

    @media (max-width: 768px) {
      h1 {
        font-size: 3rem;
      }

      .subtitle {
        font-size: 1.1rem;
      }

      .timeline::before {
        left: 30px;
      }

      .memory-content {
        width: calc(100% - 80px);
        margin-left: 80px !important;
      }

      .memory-icon {
        left: 30px;
      }

      .back-button {
        top: 20px;
        left: 20px;
        padding: 10px 20px;
        font-size: 0.9rem;
      }
    }

  /* ---------- Theme Color Variables ---------- */
  :root {
    --bg-color: #ffffff;
    --text-color: #000000;
    --accent-color: #ff3366;
  }

  /* Dark Theme */
  body.dark-theme {
    --bg-color: #121212;
    --text-color: #ffffff;
    --accent-color: #bb86fc;
  }

  /* Romantic Pink Theme */
  body.romantic-theme {
    --bg-color: #ffe6f2;
    --text-color: #b30059;
    --accent-color: #ff66b2;
  }

  /* Elegant Purple Theme */
  body.purple-theme {
    --bg-color: #f2e6ff;
    --text-color: #4b0082;
    --accent-color: #9933ff;
  }

  /* Apply global colors */
  body {
    background-color: var(--bg-color);
    color: var(--text-color);
    transition: background-color 0.4s ease, color 0.4s ease;
  }

  /* Theme button */
  .theme-btn {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--accent-color);
    color: var(--bg-color);
    border: none;
    padding: 10px 15px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    transition: transform 0.2s ease, background 0.3s ease;
    z-index: 1000;
  }
  .theme-btn:hover {
    transform: scale(1.05);
  }

  </style>
</head>

<body>

  <button id="theme-toggle" class="theme-btn"> Change Theme</button>


  <a href="page2.htm" class="back-button">‚Üê Back</a>

  <div class="sparkles" id="sparkles"></div>

  <div class="container">
    <div class="header">
      <h1>Our Beautiful Memories</h1>
      <p class="subtitle">Every moment with you is a memory worth treasuring üíï</p>
    </div>

    <div class="timeline">
      <div class="memory">
        <div class="memory-icon">üí´</div>
        <div class="memory-content">
          <h3 class="memory-title">First Meeting</h3>
          <p class="memory-date">The Beginning of Forever</p>
          <p class="memory-text">The moment our eyes first met, I knew something magical was about to begin. That spark,
            that connection - it was destiny bringing us together.</p>
        </div>
      </div>

      <div class="memory">
        <div class="memory-icon">üíù</div>
        <div class="memory-content">
          <h3 class="memory-title">First Date</h3>
          <p class="memory-date">A Night to Remember</p>
          <p class="memory-text">Nervous butterflies, endless conversations, and that perfect smile. Time stood still as
            we discovered how perfectly our souls aligned.</p>
        </div>
      </div>

      <div class="memory">
        <div class="memory-icon">üåü</div>
        <div class="memory-content">
          <h3 class="memory-title">First "I Love You"</h3>
          <p class="memory-date">Three Words, Infinite Meaning</p>
          <p class="memory-text">When those three words were spoken, my heart knew it had found its home. It was the
            most beautiful moment of vulnerability and truth.</p>
        </div>
      </div>

      <div class="memory">
        <div class="memory-icon">üé≠</div>
        <div class="memory-content">
          <h3 class="memory-title">Adventures Together</h3>
          <p class="memory-date">Making Memories</p>
          <p class="memory-text">From spontaneous trips to quiet evenings, every adventure with you is perfect. You turn
            ordinary moments into extraordinary memories.</p>
        </div>
      </div>

      <div class="memory">
        <div class="memory-icon">üåà</div>
        <div class="memory-content">
          <h3 class="memory-title">Through Thick and Thin</h3>
          <p class="memory-date">Growing Stronger Together</p>
          <p class="memory-text">Every challenge we've faced has only made us stronger. Your support, love, and presence
            have been my constant source of strength.</p>
        </div>
      </div>

      <div class="memory">
        <div class="memory-icon">üíñ</div>
        <div class="memory-content">
          <h3 class="memory-title">Today and Always</h3>
          <p class="memory-date">Our Forever Continues</p>
          <p class="memory-text">Every day with you is a new memory to cherish. I can't wait to create countless more
            beautiful moments together. You are my forever.</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Get name parameter from URL
    const params = new URLSearchParams(window.location.search);
    const name = params.get("name");

    // Update back button to include name
    const backButton = document.querySelector('.back-button');
    if (name) {
      backButton.href = `page2.htm?name=${encodeURIComponent(name)}`;
    }

    // Create sparkles
    function createSparkle() {
      const sparkle = document.createElement('div');
      sparkle.className = 'sparkle';
      sparkle.style.left = Math.random() * 100 + '%';
      sparkle.style.top = Math.random() * 100 + '%';
      sparkle.style.animationDelay = Math.random() * 3 + 's';
      document.getElementById('sparkles').appendChild(sparkle);

      setTimeout(() => sparkle.remove(), 3000);
    }

    // Generate sparkles
    for (let i = 0; i < 30; i++) {
      createSparkle();
    }

    setInterval(createSparkle, 500);

    const themes = ["light", "dark", "romantic", "purple"];
  let currentThemeIndex = 0;

  // Load saved theme
  const savedTheme = localStorage.getItem("theme");
  if (savedTheme) {
    document.body.classList.add(`${savedTheme}-theme`);
    currentThemeIndex = themes.indexOf(savedTheme);
  } else {
    document.body.classList.add("light-theme");
  }

  const btn = document.getElementById("theme-toggle");
  if (btn) {
    btn.addEventListener("click", () => {
      document.body.classList.remove(`${themes[currentThemeIndex]}-theme`);
      currentThemeIndex = (currentThemeIndex + 1) % themes.length;
      const newTheme = themes[currentThemeIndex];
      document.body.classList.add(`${newTheme}-theme`);
      localStorage.setItem("theme", newTheme);
    });
  }
  
  </script>

</body>

</html>